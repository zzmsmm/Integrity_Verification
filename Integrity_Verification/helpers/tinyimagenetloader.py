# -*- coding: utf-8 -*-
"""TinyImageNetLoader.ipynb

Automatically generated by Colaboratory.


"""

#loads images as 3*64*64 tensors 

import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.utils.data import Dataset
import os, glob
from torchvision.io import read_image

cwd = os.getcwd()

batch_size = 64

class TrainTinyImageNetDataset(Dataset):
    def __init__(self, id, transform=None):
        self.filenames = glob.glob(os.path.join(cwd, 'data', 'tiny-imagenet-200/train/*/*/*.JPEG'))
        self.transform = transform
        self.id_dict = id

    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, idx):
        img_path = self.filenames[idx]
        image = read_image(img_path)
        if image.shape[0] == 1:
          image = read_image(img_path)
          image = image.repeat(3, 1, 1)
        label = self.id_dict[img_path.split('/')[7]]
        if self.transform:
            # image = self.transform(image.type(torch.FloatTensor))
            image = self.transform(image)
        return image, label

class TestTinyImageNetDataset(Dataset):
    def __init__(self, id, transform=None):
        self.filenames = glob.glob(os.path.join(cwd, 'data', 'tiny-imagenet-200/val/images/*.JPEG'))
        self.transform = transform
        self.id_dict = id
        self.cls_dic = {}
        for i, line in enumerate(open(os.path.join(cwd, 'data', 'tiny-imagenet-200/val/val_annotations.txt'), 'r')):
            a = line.split('\t')
            img, cls_id = a[0],a[1]
            self.cls_dic[img] = self.id_dict[cls_id]

    def __len__(self):
        return len(self.filenames)

    def __getitem__(self, idx):
        img_path = self.filenames[idx]
        image = read_image(img_path)
        if image.shape[0] == 1:
          image = read_image(img_path)
          image = image.repeat(3, 1, 1)
        label = self.cls_dic[img_path.split('/')[-1]]
        if self.transform:
            # image = self.transform(image.type(torch.FloatTensor))
            image = self.transform(image)
        return image, label

# transform = transforms.Normalize((122.4786, 114.2755, 101.3963), (70.4924, 68.5679, 71.8127))

# trainset = TrainTinyImageNetDataset(id=id_dict, transform = transform)
# trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, shuffle=True, num_workers=2)

# testset = TestTinyImageNetDataset(id=id_dict, transform=transform)
# testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, shuffle=False, num_workers=2)
